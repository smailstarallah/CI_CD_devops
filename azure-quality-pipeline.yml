# Pipeline de tests de qualité pour EduPlatform
# Ce pipeline se concentre sur les tests de performance, accessibilité et SEO

trigger: none # Déclenchement manuel uniquement

pr:
- main
- develop

parameters:
- name: environment
  displayName: 'Environnement à tester'
  type: string
  default: 'production'
  values:
  - 'development'
  - 'production'

- name: testType
  displayName: 'Type de tests à exécuter'
  type: string
  default: 'all'
  values:
  - 'performance'
  - 'accessibility'
  - 'seo'
  - 'security'
  - 'all'

variables:
  vmImageName: 'ubuntu-latest'
  nodeVersion: '18.x'

stages:
- stage: QualityTests
  displayName: 'Tests de Qualité'
  jobs:
  - job: LighthouseTests
    displayName: 'Tests Lighthouse (Performance, Accessibilité, SEO)'
    condition: or(eq('${{ parameters.testType }}', 'all'), eq('${{ parameters.testType }}', 'performance'), eq('${{ parameters.testType }}', 'accessibility'), eq('${{ parameters.testType }}', 'seo'))
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: $(nodeVersion)
    
    - script: |
        npm install -g lighthouse
        npm install -g lighthouse-ci
      displayName: 'Install Lighthouse'
    
    - script: |
        # Déterminer l'URL en fonction de l'environnement
        if [ "${{ parameters.environment }}" == "development" ]; then
          WEBSITE_URL="https://steduplatformdev.z6.web.core.windows.net/"
        else
          WEBSITE_URL="https://steduplatform.z6.web.core.windows.net/"
        fi
        
        echo "Testing website: $WEBSITE_URL"
        
        # Exécuter Lighthouse avec configuration personnalisée
        lighthouse $WEBSITE_URL \
          --output json \
          --output html \
          --output-path ./lighthouse-report \
          --chrome-flags="--headless --no-sandbox --disable-gpu" \
          --preset=desktop \
          --quiet
        
        # Créer un rapport détaillé
        echo "=== LIGHTHOUSE REPORT ===" > lighthouse-summary.txt
        echo "Date: $(date)" >> lighthouse-summary.txt
        echo "URL: $WEBSITE_URL" >> lighthouse-summary.txt
        echo "Environment: ${{ parameters.environment }}" >> lighthouse-summary.txt
        echo "" >> lighthouse-summary.txt
        
        # Extraire les scores
        PERFORMANCE=$(node -p "JSON.parse(require('fs').readFileSync('./lighthouse-report.report.json')).lhr.categories.performance.score * 100")
        ACCESSIBILITY=$(node -p "JSON.parse(require('fs').readFileSync('./lighthouse-report.report.json')).lhr.categories.accessibility.score * 100")
        BEST_PRACTICES=$(node -p "JSON.parse(require('fs').readFileSync('./lighthouse-report.report.json')).lhr.categories['best-practices'].score * 100")
        SEO=$(node -p "JSON.parse(require('fs').readFileSync('./lighthouse-report.report.json')).lhr.categories.seo.score * 100")
        
        echo "Performance: $PERFORMANCE/100" >> lighthouse-summary.txt
        echo "Accessibility: $ACCESSIBILITY/100" >> lighthouse-summary.txt
        echo "Best Practices: $BEST_PRACTICES/100" >> lighthouse-summary.txt
        echo "SEO: $SEO/100" >> lighthouse-summary.txt
        
        # Vérifier les seuils
        echo "" >> lighthouse-summary.txt
        echo "=== QUALITY GATES ===" >> lighthouse-summary.txt
        
        if (( $(echo "$PERFORMANCE >= 80" | bc -l) )); then
          echo "✅ Performance: PASSED ($PERFORMANCE >= 80)" >> lighthouse-summary.txt
        else
          echo "❌ Performance: FAILED ($PERFORMANCE < 80)" >> lighthouse-summary.txt
        fi
        
        if (( $(echo "$ACCESSIBILITY >= 90" | bc -l) )); then
          echo "✅ Accessibility: PASSED ($ACCESSIBILITY >= 90)" >> lighthouse-summary.txt
        else
          echo "❌ Accessibility: FAILED ($ACCESSIBILITY < 90)" >> lighthouse-summary.txt
        fi
        
        if (( $(echo "$SEO >= 85" | bc -l) )); then
          echo "✅ SEO: PASSED ($SEO >= 85)" >> lighthouse-summary.txt
        else
          echo "❌ SEO: FAILED ($SEO < 85)" >> lighthouse-summary.txt
        fi
        
        # Afficher le résumé
        cat lighthouse-summary.txt
        
        # Sauvegarder les scores comme variables de pipeline
        echo "##vso[task.setvariable variable=performanceScore;isOutput=true]$PERFORMANCE"
        echo "##vso[task.setvariable variable=accessibilityScore;isOutput=true]$ACCESSIBILITY"
        echo "##vso[task.setvariable variable=seoScore;isOutput=true]$SEO"
        
      displayName: 'Run Lighthouse Tests'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Lighthouse Reports'
      inputs:
        PathtoPublish: './'
        ArtifactName: 'lighthouse-reports'
        publishLocation: 'Container'
      condition: always()

  - job: AccessibilityTests
    displayName: 'Tests d\'Accessibilité Pa11y'
    condition: or(eq('${{ parameters.testType }}', 'all'), eq('${{ parameters.testType }}', 'accessibility'))
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: $(nodeVersion)
    
    - script: |
        npm install -g pa11y
        npm install -g pa11y-reporter-html
      displayName: 'Install Pa11y'
    
    - script: |
        # Déterminer l'URL en fonction de l'environnement
        if [ "${{ parameters.environment }}" == "development" ]; then
          WEBSITE_URL="https://steduplatformdev.z6.web.core.windows.net/"
        else
          WEBSITE_URL="https://steduplatform.z6.web.core.windows.net/"
        fi
        
        echo "Testing accessibility for: $WEBSITE_URL"
        
        # Exécuter les tests d'accessibilité
        pa11y $WEBSITE_URL \
          --standard WCAG2AA \
          --reporter html \
          --timeout 30000 \
          --wait 2000 > pa11y-report.html
        
        # Exécuter aussi avec reporter CLI pour les logs
        pa11y $WEBSITE_URL \
          --standard WCAG2AA \
          --timeout 30000 \
          --wait 2000 > pa11y-results.txt
        
        echo "=== PA11Y ACCESSIBILITY REPORT ===" 
        cat pa11y-results.txt
        
        # Compter les erreurs
        ERROR_COUNT=$(grep -c "Error" pa11y-results.txt || echo "0")
        WARNING_COUNT=$(grep -c "Warning" pa11y-results.txt || echo "0")
        
        echo ""
        echo "Accessibility Summary:"
        echo "Errors: $ERROR_COUNT"
        echo "Warnings: $WARNING_COUNT"
        
        if [ "$ERROR_COUNT" -eq "0" ]; then
          echo "✅ Accessibility: NO ERRORS FOUND"
        else
          echo "❌ Accessibility: $ERROR_COUNT ERRORS FOUND"
        fi
        
        echo "##vso[task.setvariable variable=accessibilityErrors;isOutput=true]$ERROR_COUNT"
        echo "##vso[task.setvariable variable=accessibilityWarnings;isOutput=true]$WARNING_COUNT"
        
      displayName: 'Run Accessibility Tests'
      continueOnError: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Accessibility Reports'
      inputs:
        PathtoPublish: './'
        ArtifactName: 'accessibility-reports'
        publishLocation: 'Container'
      condition: always()

  - job: SecurityTests
    displayName: 'Tests de Sécurité'
    condition: or(eq('${{ parameters.testType }}', 'all'), eq('${{ parameters.testType }}', 'security'))
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - script: |
        # Déterminer l'URL en fonction de l'environnement
        if [ "${{ parameters.environment }}" == "development" ]; then
          WEBSITE_URL="https://steduplatformdev.z6.web.core.windows.net/"
        else
          WEBSITE_URL="https://steduplatform.z6.web.core.windows.net/"
        fi
        
        echo "Testing security for: $WEBSITE_URL"
        
        # Tests de sécurité de base avec curl
        echo "=== SECURITY HEADERS TEST ===" > security-report.txt
        echo "URL: $WEBSITE_URL" >> security-report.txt
        echo "Date: $(date)" >> security-report.txt
        echo "" >> security-report.txt
        
        # Vérifier les en-têtes de sécurité
        HEADERS=$(curl -s -I $WEBSITE_URL)
        
        echo "Response Headers:" >> security-report.txt
        echo "$HEADERS" >> security-report.txt
        echo "" >> security-report.txt
        
        # Vérifier HTTPS
        if [[ $WEBSITE_URL == https* ]]; then
          echo "✅ HTTPS: ENABLED" >> security-report.txt
        else
          echo "❌ HTTPS: DISABLED" >> security-report.txt
        fi
        
        # Vérifier les en-têtes de sécurité
        if echo "$HEADERS" | grep -i "x-frame-options" > /dev/null; then
          echo "✅ X-Frame-Options: PRESENT" >> security-report.txt
        else
          echo "⚠️ X-Frame-Options: MISSING" >> security-report.txt
        fi
        
        if echo "$HEADERS" | grep -i "x-content-type-options" > /dev/null; then
          echo "✅ X-Content-Type-Options: PRESENT" >> security-report.txt
        else
          echo "⚠️ X-Content-Type-Options: MISSING" >> security-report.txt
        fi
        
        if echo "$HEADERS" | grep -i "strict-transport-security" > /dev/null; then
          echo "✅ HSTS: PRESENT" >> security-report.txt
        else
          echo "⚠️ HSTS: MISSING" >> security-report.txt
        fi
        
        # Afficher le rapport
        cat security-report.txt
        
      displayName: 'Run Security Tests'
      continueOnError: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Security Reports'
      inputs:
        PathtoPublish: './'
        ArtifactName: 'security-reports'
        publishLocation: 'Container'
      condition: always()

  - job: PerformanceTests
    displayName: 'Tests de Performance'
    condition: or(eq('${{ parameters.testType }}', 'all'), eq('${{ parameters.testType }}', 'performance'))
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - script: |
        # Déterminer l'URL en fonction de l'environnement
        if [ "${{ parameters.environment }}" == "development" ]; then
          WEBSITE_URL="https://steduplatformdev.z6.web.core.windows.net/"
        else
          WEBSITE_URL="https://steduplatform.z6.web.core.windows.net/"
        fi
        
        echo "Testing performance for: $WEBSITE_URL"
        
        # Tests de performance avec curl
        echo "=== PERFORMANCE TEST ===" > performance-report.txt
        echo "URL: $WEBSITE_URL" >> performance-report.txt
        echo "Date: $(date)" >> performance-report.txt
        echo "" >> performance-report.txt
        
        # Test de temps de réponse (5 tentatives)
        TOTAL_TIME=0
        for i in {1..5}; do
          TIME=$(curl -s -o /dev/null -w "%{time_total}" $WEBSITE_URL)
          echo "Attempt $i: ${TIME}s" >> performance-report.txt
          TOTAL_TIME=$(echo "$TOTAL_TIME + $TIME" | bc)
        done
        
        AVERAGE_TIME=$(echo "scale=3; $TOTAL_TIME / 5" | bc)
        echo "" >> performance-report.txt
        echo "Average Response Time: ${AVERAGE_TIME}s" >> performance-report.txt
        
        # Vérifier le seuil de performance (2 secondes)
        if (( $(echo "$AVERAGE_TIME <= 2.0" | bc -l) )); then
          echo "✅ Response Time: PASSED (${AVERAGE_TIME}s <= 2.0s)" >> performance-report.txt
        else
          echo "❌ Response Time: FAILED (${AVERAGE_TIME}s > 2.0s)" >> performance-report.txt
        fi
        
        # Test de la taille des ressources
        CONTENT_LENGTH=$(curl -s -I $WEBSITE_URL | grep -i content-length | awk '{print $2}' | tr -d '\r')
        if [ ! -z "$CONTENT_LENGTH" ]; then
          SIZE_KB=$(echo "scale=2; $CONTENT_LENGTH / 1024" | bc)
          echo "Content Size: ${SIZE_KB}KB" >> performance-report.txt
        fi
        
        cat performance-report.txt
        
        echo "##vso[task.setvariable variable=averageResponseTime;isOutput=true]$AVERAGE_TIME"
        
      displayName: 'Run Performance Tests'
      continueOnError: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Performance Reports'
      inputs:
        PathtoPublish: './'
        ArtifactName: 'performance-reports'
        publishLocation: 'Container'
      condition: always()

- stage: ReportGeneration
  displayName: 'Génération de Rapport'
  dependsOn: QualityTests
  condition: always()
  jobs:
  - job: GenerateReport
    displayName: 'Générer Rapport de Qualité'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - download: current
      artifact: lighthouse-reports
      condition: always()
    
    - download: current
      artifact: accessibility-reports
      condition: always()
    
    - download: current
      artifact: security-reports
      condition: always()
    
    - download: current
      artifact: performance-reports
      condition: always()
    
    - script: |
        echo "=== EDUPLATFORM QUALITY REPORT ===" > final-quality-report.md
        echo "**Date:** $(date)" >> final-quality-report.md
        echo "**Environment:** ${{ parameters.environment }}" >> final-quality-report.md
        echo "**Test Type:** ${{ parameters.testType }}" >> final-quality-report.md
        echo "" >> final-quality-report.md
        echo "## Summary" >> final-quality-report.md
        echo "" >> final-quality-report.md
        
        # Consolider tous les rapports
        if [ -f "$(Pipeline.Workspace)/lighthouse-reports/lighthouse-summary.txt" ]; then
          echo "### Lighthouse Results" >> final-quality-report.md
          echo "\`\`\`" >> final-quality-report.md
          cat "$(Pipeline.Workspace)/lighthouse-reports/lighthouse-summary.txt" >> final-quality-report.md
          echo "\`\`\`" >> final-quality-report.md
          echo "" >> final-quality-report.md
        fi
        
        if [ -f "$(Pipeline.Workspace)/accessibility-reports/pa11y-results.txt" ]; then
          echo "### Accessibility Results" >> final-quality-report.md
          echo "\`\`\`" >> final-quality-report.md
          cat "$(Pipeline.Workspace)/accessibility-reports/pa11y-results.txt" >> final-quality-report.md
          echo "\`\`\`" >> final-quality-report.md
          echo "" >> final-quality-report.md
        fi
        
        if [ -f "$(Pipeline.Workspace)/security-reports/security-report.txt" ]; then
          echo "### Security Results" >> final-quality-report.md
          echo "\`\`\`" >> final-quality-report.md
          cat "$(Pipeline.Workspace)/security-reports/security-report.txt" >> final-quality-report.md
          echo "\`\`\`" >> final-quality-report.md
          echo "" >> final-quality-report.md
        fi
        
        if [ -f "$(Pipeline.Workspace)/performance-reports/performance-report.txt" ]; then
          echo "### Performance Results" >> final-quality-report.md
          echo "\`\`\`" >> final-quality-report.md
          cat "$(Pipeline.Workspace)/performance-reports/performance-report.txt" >> final-quality-report.md
          echo "\`\`\`" >> final-quality-report.md
          echo "" >> final-quality-report.md
        fi
        
        echo "---" >> final-quality-report.md
        echo "*Generated by Azure DevOps Pipeline*" >> final-quality-report.md
        
        echo "Quality report generated:"
        cat final-quality-report.md
        
      displayName: 'Generate Final Report'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Final Report'
      inputs:
        PathtoPublish: './'
        ArtifactName: 'quality-report'
        publishLocation: 'Container'
